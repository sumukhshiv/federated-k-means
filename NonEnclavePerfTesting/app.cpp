#include <iostream>
#include <cassert>
#include <stdlib.h>
#include <stdio.h>
#include "kmeans_perf.h"
#include <cstring>
#include <string.h>
#include <stdio.h>
#include <iostream>
#include <assert.h>
#include "bank1_perf.h"
using namespace std;

struct node_t {
    uint32_t value;
    struct node_t* next;
    struct node_t* prev;
};

int current_i = 0;
int current_j = 0;
int total_rows = 0;
const int NUM_DATA_POINTS_AT_ONCE = 1000;
const int GLOBAL_DIM = 3;
const int NUM_CLUSTERS = 3;

double static data_points[1000][GLOBAL_DIM];


int storeData(double* data, int dim, int n) {
    total_rows += n;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < dim; j++) {
            data_points[current_i][current_j] = data[i*dim + j];
            current_j += 1;
        }
        current_j = 0;
        current_i += 1;
    }
    printf("SIDHU");
    for (int i = 0; i < total_rows; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%f", data_points[i][j]);
        }
    }
    return 1;
}

double* deserialize(int num_points_bank, int dim, const char* my_str) {
    char my_char_array[5000];
    strncpy(my_char_array, my_str, sizeof(char)*strlen(my_str));
    char* chars_array = strtok(my_char_array, ",");
    
    double deserialized_array[num_points_bank*dim];
    int i = 0;
    
    while(chars_array) {
        if (i >= num_points_bank*dim) {
            break;
        }
        deserialized_array[i] = atof(chars_array);
        chars_array = strtok(NULL, ",");
        i++;
    }
    double* to_ret = (double*)malloc(sizeof(double)*num_points_bank*dim);
    memcpy(to_ret, deserialized_array, sizeof(double)*num_points_bank*dim);
    return (double*) to_ret;
}

void execute_k_means(int num_clusters) {
    double weird_necessary_array[100][GLOBAL_DIM];
    double cluster_initial[num_clusters][GLOBAL_DIM] = {{0.3, 0.3, 0.3}, {0.6, 0.6, 0.6}, {0.9, 0.9, 0.9}};
    double cluster_final[num_clusters][GLOBAL_DIM];

    kmeans(GLOBAL_DIM, (double*)data_points, total_rows, num_clusters, (double*)cluster_initial, (int*) cluster_final);
}

int main(int argc, char const *argv[]) {

    
//     int ptr;
//     int dim = 3;
//     int n = 100;
//     sgx_status_t status;

    // double kirat_data[n][dim] = {{0.3030697873146271,0.3030697873146271,0.3030697873146271},{0.2808936723034907,0.2808936723034907,0.2808936723034907},{0.30367809608796614,0.30367809608796614,0.30367809608796614},{0.3030199074031139,0.3030199074031139,0.3030199074031139},{0.31090633263350614,0.31090633263350614,0.31090633263350614},{0.3103354725841466,0.3103354725841466,0.3103354725841466},{0.2995354973029857,0.2995354973029857,0.2995354973029857},{0.28549467898513614,0.28549467898513614,0.28549467898513614},{0.3054152011984239,0.3054152011984239,0.3054152011984239},{0.3069385735651228,0.3069385735651228,0.3069385735651228},{0.29824512406138876,0.29824512406138876,0.29824512406138876},{0.30665682664420885,0.30665682664420885,0.30665682664420885},{0.2988424061307112,0.2988424061307112,0.2988424061307112},{0.2794963569295213,0.2794963569295213,0.2794963569295213},{0.2992941535538154,0.2992941535538154,0.2992941535538154},{0.286211787003142,0.286211787003142,0.286211787003142},{0.29074483572365967,0.29074483572365967,0.29074483572365967},{0.29327592413520487,0.29327592413520487,0.29327592413520487},{0.29636144567073214,0.29636144567073214,0.29636144567073214},{0.3012000270054786,0.3012000270054786,0.3012000270054786},{0.2880979854939783,0.2880979854939783,0.2880979854939783},{0.3137333451886978,0.3137333451886978,0.3137333451886978},{0.28811863018280026,0.28811863018280026,0.28811863018280026},{0.3048730309374213,0.3048730309374213,0.3048730309374213},{0.30512167668129586,0.30512167668129586,0.30512167668129586},{0.29617565574822113,0.29617565574822113,0.29617565574822113},{0.299647369535345,0.299647369535345,0.299647369535345},{0.31451993611543266,0.31451993611543266,0.31451993611543266},{0.2973065162953068,0.2973065162953068,0.2973065162953068},{0.2974672951598521,0.2974672951598521,0.2974672951598521},{0.6077049930996429,0.6077049930996429,0.6077049930996429},{0.5911618817816682,0.5911618817816682,0.5911618817816682},{0.5982867199332335,0.5982867199332335,0.5982867199332335},{0.605950938928775,0.605950938928775,0.605950938928775},{0.6165454308890274,0.6165454308890274,0.6165454308890274},{0.5937022166689185,0.5937022166689185,0.5937022166689185},{0.5990321836737337,0.5990321836737337,0.5990321836737337},{0.5871030592614939,0.5871030592614939,0.5871030592614939},{0.5930022282063667,0.5930022282063667,0.5930022282063667},{0.6130757252683101,0.6130757252683101,0.6130757252683101},{0.5978220475471928,0.5978220475471928,0.5978220475471928},{0.5872872348637117,0.5872872348637117,0.5872872348637117},{0.5880892314515322,0.5880892314515322,0.5880892314515322},{0.6070730159438522,0.6070730159438522,0.6070730159438522},{0.5894143782658511,0.5894143782658511,0.5894143782658511},{0.599005391327391,0.599005391327391,0.599005391327391},{0.6036133597799735,0.6036133597799735,0.6036133597799735},{0.6072065062391973,0.6072065062391973,0.6072065062391973},{0.5996041984673666,0.5996041984673666,0.5996041984673666},{0.6118012000166696,0.6118012000166696,0.6118012000166696},{0.5939191739484727,0.5939191739484727,0.5939191739484727},{0.5886750065063125,0.5886750065063125,0.5886750065063125},{0.5997426684771702,0.5997426684771702,0.5997426684771702},{0.6102334863401919,0.6102334863401919,0.6102334863401919},{0.5912972333278679,0.5912972333278679,0.5912972333278679},{0.6025604243740265,0.6025604243740265,0.6025604243740265},{0.6219972918131564,0.6219972918131564,0.6219972918131564},{0.5923896403159432,0.5923896403159432,0.5923896403159432},{0.6027579545288441,0.6027579545288441,0.6027579545288441},{0.5919086122601278,0.5919086122601278,0.5919086122601278},{0.5893599381995716,0.5893599381995716,0.5893599381995716},{0.5810214653023501,0.5810214653023501,0.5810214653023501},{0.589016806862104,0.589016806862104,0.589016806862104},{0.5911380139516503,0.5911380139516503,0.5911380139516503},{0.5970084355685829,0.5970084355685829,0.5970084355685829},{0.5993451823616759,0.5993451823616759,0.5993451823616759},{0.6033988664617769,0.6033988664617769,0.6033988664617769},{0.6096485616936191,0.6096485616936191,0.6096485616936191},{0.6025352417947997,0.6025352417947997,0.6025352417947997},{0.5897520322856289,0.5897520322856289,0.5897520322856289},{0.9081675950083055,0.9081675950083055,0.9081675950083055},{0.9167215466433015,0.9167215466433015,0.9167215466433015},{0.8922306368258723,0.8922306368258723,0.8922306368258723},{0.9163463050131526,0.9163463050131526,0.9163463050131526},{0.9042397040960038,0.9042397040960038,0.9042397040960038},{0.9049571448274706,0.9049571448274706,0.9049571448274706},{0.8981490887987427,0.8981490887987427,0.8981490887987427},{0.8860200663613924,0.8860200663613924,0.8860200663613924},{0.900912256877903,0.900912256877903,0.900912256877903},{0.8959109343915358,0.8959109343915358,0.8959109343915358},{0.8970430120772672,0.8970430120772672,0.8970430120772672},{0.9029120003866563,0.9029120003866563,0.9029120003866563},{0.9112702999606773,0.9112702999606773,0.9112702999606773},{0.8995570642703542,0.8995570642703542,0.8995570642703542},{0.900068574605907,0.900068574605907,0.900068574605907},{0.9033991377238719,0.9033991377238719,0.9033991377238719},{0.8888194555316604,0.8888194555316604,0.8888194555316604},{0.8999100358215115,0.8999100358215115,0.8999100358215115},{0.8740608415262292,0.8740608415262292,0.8740608415262292},{0.8976274545955861,0.8976274545955861,0.8976274545955861},{0.919480357139294,0.919480357139294,0.919480357139294},{0.9001299776113914,0.9001299776113914,0.9001299776113914},{0.9109115936626112,0.9109115936626112,0.9109115936626112},{0.9176965877955311,0.9176965877955311,0.9176965877955311},{0.8996853626211772,0.8996853626211772,0.8996853626211772},{0.9171306250899065,0.9171306250899065,0.9171306250899065},{0.8942957668659768,0.8942957668659768,0.8942957668659768},{0.90506280312969,0.90506280312969,0.90506280312969},{0.8988188251658166,0.8988188251658166,0.8988188251658166},{0.9130477624054308,0.9130477624054308,0.9130477624054308}};

//     status = storeData(global_eid, &ptr, (double*)kirat_data, dim, n);

    // printf("Error code is 0x%X. Please refer to the \"Intel SGX SDK Developer Reference\" for more details.\n", status);
    // assert (status == SGX_SUCCESS);

//     status = execute_k_means(global_eid, 3); 
//     assert (status == SGX_SUCCESS);
    char* bank1_data = (char*)malloc(sizeof(char) * NUM_DATA_POINTS_AT_ONCE);
    int num_points_bank1 = send_data_1(bank1_data, GLOBAL_DIM);
    double* bank_1_points = deserialize(num_points_bank1, GLOBAL_DIM, bank1_data);
    storeData(bank_1_points, GLOBAL_DIM, num_points_bank1);
    free(bank1_data);
    execute_k_means(NUM_CLUSTERS);
    return 0;
}




